{"version":3,"sources":["components/UserCard.js","components/Form.js","components/App.js","index.js"],"names":["UserCard","props","className","name","age","jobTitle","boss","Form","users","newUser","onChange","onSubmit","htmlFor","type","id","value","autoComplete","required","bossID","map","user","key","initialFormState","App","useState","setUsers","setNewUser","useEffect","usersArray","userItem","find","x","e","target","preventDefault","formattedUser","length","parseInt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAqBeA,MAjBf,SAAkBC,GAChB,OACE,yBAAKC,UAAU,aACb,4BAAKD,EAAME,KAAX,MAAmB,0BAAMD,UAAU,OAAOD,EAAMG,MAChD,2BAAIH,EAAMI,UACTJ,EAAMK,KAAO,4CAAkBL,EAAMK,MAAY,uBAAGJ,UAAU,UAAb,gCCmEzCK,MAzEf,YAAuD,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SACxC,OACE,0BAAMA,SAAUA,GACd,yBAAKT,UAAU,gBACb,yBAAKA,UAAU,iBACb,2BAAOU,QAAQ,QAAf,QACA,2BACEC,KAAK,OACLV,KAAK,OACLW,GAAG,OACHC,MAAON,EAAQN,KACfO,SAAUA,EACVM,aAAa,MACbC,UAAQ,KAIZ,yBAAKf,UAAU,iBACb,2BAAOU,QAAQ,YAAf,aACA,2BACEC,KAAK,OACLV,KAAK,WACLW,GAAG,WACHC,MAAON,EAAQJ,SACfK,SAAUA,EACVM,aAAa,MACbC,UAAQ,KAIZ,yBAAKf,UAAU,iBACb,2BAAOU,QAAQ,OAAf,OACA,2BACEC,KAAK,SACLV,KAAK,MACLW,GAAG,MACHC,MAAON,EAAQL,IACfM,SAAUA,EACVO,UAAQ,KAIZ,yBAAKf,UAAU,iBACb,2BAAOU,QAAQ,UAAf,eACA,4BAAQT,KAAK,SAASW,GAAG,SAASC,MAAON,EAAQS,OAAQR,SAAUA,GACjE,4BAAQK,MAAM,QAAd,sBACCP,EAAMW,KAAI,SAACC,GAAD,OACT,4BAAQL,MAAOK,EAAKN,GAAIO,IAAKD,EAAKN,IAAKM,EAAKjB,YAMpD,yBAAKD,UAAU,kBACb,4BAAQW,KAAK,UAAb,aCpDFS,EAAmB,CACvBnB,KAAM,GACNE,SAAU,GACVD,IAAK,GACLc,OAAQ,QA8DKK,MA3Df,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNhB,EADM,KACCiB,EADD,OAEiBD,mBAASF,GAF1B,mBAENb,EAFM,KAEGiB,EAFH,KA0Cb,OAtCAC,qBAAU,WACRF,EACEG,EAAWT,KAAI,SAAAU,GAAQ,kCAClBA,GADkB,IAErBvB,KAAMuB,EAASX,OAASU,EAAWE,MAAK,SAAAC,GAAC,OAAIA,EAAEjB,KAAOe,EAASX,UAAQf,KAAO,aAGjF,IAgCD,yBAAKD,UAAU,OACb,0CACCM,EAAMW,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,eAAUC,IAAKD,EAAKN,IAAQM,OAE9B,iDACA,kBAAC,EAAD,CACEZ,MAAOA,EACPC,QAASA,EACTC,SAvCe,SAAAsB,GACnBN,EAAW,2BACNjB,GADK,kBAEPuB,EAAEC,OAAO9B,KAAO6B,EAAEC,OAAOlB,UAqCxBJ,SAjCe,SAAAqB,GACnBA,EAAEE,iBAEF,IAAIC,EAAa,yBACfrB,GAAIN,EAAM4B,OAAS,GAChB3B,GAFY,IAGfL,IAAKiC,SAAS5B,EAAQL,KACtBc,OAA2B,SAAnBT,EAAQS,OAAoB,KAAOmB,SAAS5B,EAAQS,UAG9DiB,EAAa,2BACRA,GADQ,IAEX7B,KAAM6B,EAAcjB,OAASV,EAAMsB,MAAK,SAAAC,GAAC,OAAIA,EAAEjB,KAAOqB,EAAcjB,UAAQf,KAAO,OAGrFsB,EAAS,GAAD,mBACHjB,GADG,CAEN2B,KAEFT,EAAWJ,QC9CfgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.a0ba9def.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nfunction UserCard(props) {\n  return (\n    <div className=\"user-card\">\n      <h3>{props.name} - <span className=\"age\">{props.age}</span></h3>\n      <p>{props.jobTitle}</p>\n      {props.boss ? <p>Direct Boss - {props.boss}</p> : <p className=\"dimmed\">Doesn't have a direct boss</p>}\n    </div>\n  )\n}\n\nUserCard.propTypes = {\n  name: PropTypes.string.isRequired,\n  age: PropTypes.number.isRequired,\n  jobTitle: PropTypes.string.isRequired,\n  boss: PropTypes.any\n}\n\nexport default UserCard\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Form({ users, newUser, onChange, onSubmit }) {\n  return (\n    <form onSubmit={onSubmit}>\n      <div className=\"form-wrapper\">\n        <div className=\"input-wrapper\">\n          <label htmlFor=\"name\">Name</label>\n          <input \n            type=\"text\"\n            name=\"name\"\n            id=\"name\"\n            value={newUser.name}\n            onChange={onChange}\n            autoComplete=\"off\"\n            required\n          />\n        </div>\n\n        <div className=\"input-wrapper\">\n          <label htmlFor=\"jobTitle\">Job Title</label>\n          <input\n            type=\"text\"\n            name=\"jobTitle\"\n            id=\"jobTitle\"\n            value={newUser.jobTitle}\n            onChange={onChange}\n            autoComplete=\"off\"\n            required\n          />\n        </div>\n\n        <div className=\"input-wrapper\">\n          <label htmlFor=\"age\">Age</label>\n          <input\n            type=\"number\"\n            name=\"age\"\n            id=\"age\"\n            value={newUser.age}\n            onChange={onChange}\n            required\n          />\n        </div>\n\n        <div className=\"input-wrapper\">\n          <label htmlFor=\"bossID\">Direct Boss</label>\n          <select name=\"bossID\" id=\"bossID\" value={newUser.bossID} onChange={onChange}>\n            <option value=\"None\">Has no direct boss</option>\n            {users.map((user) => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n      \n      <div className=\"button-wrapper\">\n        <button type=\"submit\">Submit</button>\n      </div>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  users: PropTypes.array,\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n\n  newUser: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    jobTitle: PropTypes.string.isRequired,\n    age: PropTypes.string.isRequired,\n    bossID: PropTypes.string.isRequired\n  })\n}\n\nexport default Form\n","import React, { useState, useEffect } from 'react'\nimport usersArray from '../users.json'\nimport UserCard from './UserCard'\nimport Form from './Form'\n\nconst initialFormState = {\n  name: \"\",\n  jobTitle: \"\",\n  age: \"\",\n  bossID: \"None\"\n}\n\nfunction App() {\n  const [users, setUsers] = useState([])\n  const [newUser, setNewUser] = useState(initialFormState)\n\n  useEffect(() => {\n    setUsers(\n      usersArray.map(userItem => ({\n        ...userItem,\n        boss: userItem.bossID ? usersArray.find(x => x.id === userItem.bossID).name : null\n      }))\n    )\n  }, [])\n\n  const handleChange = e => {\n    setNewUser({\n      ...newUser,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault()\n\n    let formattedUser = {\n      id: users.length + 1,\n      ...newUser,\n      age: parseInt(newUser.age),\n      bossID: newUser.bossID === \"None\" ? null : parseInt(newUser.bossID)\n    }\n\n    formattedUser = {\n      ...formattedUser,\n      boss: formattedUser.bossID ? users.find(x => x.id === formattedUser.bossID).name : null\n    }\n\n    setUsers([\n      ...users,\n      formattedUser\n    ])\n    setNewUser(initialFormState)\n  }\n\n  return (\n    <div className=\"app\">\n      <h1>PSL Family</h1>\n      {users.map(user => (\n        <UserCard key={user.id} {...user} />\n      ))}\n      <h2>Register new user</h2>\n      <Form\n        users={users}\n        newUser={newUser}\n        onChange={handleChange}\n        onSubmit={handleSubmit}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}